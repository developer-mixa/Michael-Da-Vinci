version: '3.8'

services:
  web:
    build: .
    env_file: .env
    command: > 
      sh -c "python3 ./src/main/app.py"
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - "./:/code"
    depends_on:
      rabbitmq:
          condition: service_healthy
      minio:
        condition: service_started
      postgres:
        condition: service_started
      prometheus:
        condition: service_started
      register_consumer:
        condition: service_started
      user_state_consumer:
        condition: service_started
      acquaintance_consumer:
        condition: service_started
      redis:
        condition: service_started
      migrator:
        condition: service_completed_successfully
    networks:
      - acquaintance_internet
      - acquaintance_pg_net
      - rabbit_internet
  register_consumer:
    build: .
    restart: always
    ports:
      - "${REGISTRATION_CONSUMER_PORT}:${REGISTRATION_CONSUMER_PORT}"
    command: >
      sh -c "python3 ./src/apps/consumers/register_consumer/app.py"
    volumes:
      - "./:/code"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
    networks:
      - acquaintance_internet
      - acquaintance_pg_net
      - rabbit_internet
  user_state_consumer:
    build: .
    restart: always
    command: >
      sh -c "python3 ./src/apps/consumers/user_state_consumer/app.py"
    ports:
      - "${USER_STATE_CONSUMER_PORT}:${USER_STATE_CONSUMER_PORT}"
    volumes:
      - "./:/code"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
      prometheus:
        condition: service_started
      migrator:
        condition: service_completed_successfully
    networks:
      - acquaintance_internet
      - acquaintance_pg_net
      - rabbit_internet
  acquaintance_consumer:
    build: .
    restart: always
    ports:
      - "${ACQUINTANCE_CONSUMER_PORT}:${ACQUINTANCE_CONSUMER_PORT}"
    command: >
      sh -c "python3 ./src/apps/consumers/acquaintance_consumer/app.py"
    volumes:
      - "./:/code"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
      migrator:
        condition: service_completed_successfully
    networks:
      - acquaintance_internet
      - acquaintance_pg_net
      - rabbit_internet
  postgres:
    image: postgres
    ports:
      - "8888:5432"
    command: [ "postgres", "-c", "log_statement=all", "-c", "log_destination=stderr" ]
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${PG_USER}", "-d", "${PG_DBNAME}" ]
      interval: 1s
      retries: 20
    environment:
      POSTGRES_DB: "${PG_DBNAME}"
      POSTGRES_USER: "${PG_USER}"
      POSTGRES_PASSWORD: "${PG_PASSWORD}"
    container_name: postgres-acquaintance
    volumes:
      - acquaintance_postgresql_data:/var/lib/postgresql/data/
    networks:
      - acquaintance_pg_net
  rabbitmq:
    hostname: rabbitmq
    image: rabbitmq:3.13.7-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 3s
      timeout: 10s
      retries: 3
    networks:
      - rabbit_internet
  minio:
    hostname: ${MINIO_HOST}
    image: quay.io/minio/minio:RELEASE.2024-11-07T00-52-20Z
    command: server /data --console-address ":9001"
    container_name: acquaintance-minio
    volumes:
    - /minio/data:/minio_data
    environment:
      MINIO_ROOT_USER: "${MINIO_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_PASSWORD}"
    healthcheck:
      test: ["CMD", "curl -k -f http://127.0.0.1:9001/minio/health/live || exit 1"]
      interval: 3s
      timeout: 10s
      retries: 3
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - acquaintance_internet
  prometheus:
    container_name: acquaintance-prometheus
    image: prom/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus_config.yml"
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
    networks:
      - acquaintance_internet
  redis:
    image: redis:latest
    container_name: redis_acquaintance
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6380:6379"
    volumes:
      - ./redisdata:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on >$REDIS_PASSWORD ~* +@all" > /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - acquaintance_internet
  migrator:
    container_name: migrator_acquaintance
    image: 'ghcr.io/amacneil/dbmate:2.12'
    command: -u "postgres://${PG_USER}:${PG_PASSWORD}@host.docker.internal:8888/${PG_DBNAME}?sslmode=disable" up
    volumes:
      - ./migrations:/db/migrations
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - acquaintance_pg_net

volumes:
  acquaintance_postgresql_data: null
  rabbitmq-data: null

networks:
  acquaintance_internet:
    name: acquaintance_internet
    driver: bridge
  acquaintance_pg_net:
    name: acquaintance_pg_net
    driver: bridge
  rabbit_internet:
    name: rabbit_internet
    driver: bridge